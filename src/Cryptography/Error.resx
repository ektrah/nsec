<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentNull_Algorithm" xml:space="preserve">
    <value>Algorithm cannot be null.</value>
  </data>
  <data name="ArgumentNull_Key" xml:space="preserve">
    <value>Key cannot be null.</value>
  </data>
  <data name="ArgumentNull_Password" xml:space="preserve">
    <value>Password cannot be null.</value>
  </data>
  <data name="ArgumentNull_SharedSecret" xml:space="preserve">
    <value>Shared secret cannot be null.</value>
  </data>
  <data name="ArgumentNull_String" xml:space="preserve">
    <value>String cannot be null.</value>
  </data>
  <data name="ArgumentOutOfRange_DeriveInvalidCount" xml:space="preserve">
    <value>The number of bytes to derive must be less than or equal to the maximum output size '{0}'.</value>
  </data>
  <data name="ArgumentOutOfRange_DeriveNegativeCount" xml:space="preserve">
    <value>The number of bytes to derive cannot be negative.</value>
  </data>
  <data name="ArgumentOutOfRange_GenerateNegativeCount" xml:space="preserve">
    <value>The number of bytes to generate cannot be negative.</value>
  </data>
  <data name="ArgumentOutOfRange_HashSize" xml:space="preserve">
    <value>Hash size '{0}' is out of range. Must be between {1} and {2}.</value>
  </data>
  <data name="ArgumentOutOfRange_KeySize" xml:space="preserve">
    <value>Key size '{0}' is out of range. Must be between {1} and {2}.</value>
  </data>
  <data name="ArgumentOutOfRange_MacSize" xml:space="preserve">
    <value>MAC size '{0}' is out of range. Must be between {1} and {2}.</value>
  </data>
  <data name="ArgumentOutOfRange_MustBePositive" xml:space="preserve">
    <value>'{0}' must be greater than zero.</value>
  </data>
  <data name="ArgumentOutOfRange_NonceAddend" xml:space="preserve">
    <value>The addend cannot be negative.</value>
  </data>
  <data name="ArgumentOutOfRange_NonceCounterSize" xml:space="preserve">
    <value>The nonce must have a length between 0 and {0} bytes.</value>
  </data>
  <data name="ArgumentOutOfRange_NonceFixedCounterSize" xml:space="preserve">
    <value>The total length of the nonce must be between 0 and {0} bytes.</value>
  </data>
  <data name="Argument_BadBase16Length" xml:space="preserve">
    <value>Invalid length for a Base16 span.</value>
  </data>
  <data name="Argument_BadBase32Length" xml:space="preserve">
    <value>Invalid length for a Base32 span.</value>
  </data>
  <data name="Argument_BadBase64Length" xml:space="preserve">
    <value>Invalid length for a Base64 span.</value>
  </data>
  <data name="Argument_CiphertextLength" xml:space="preserve">
    <value>The length of the ciphertext must be equal to the length of the plaintext plus the tag size.</value>
  </data>
  <data name="Argument_DeriveInvalidCount" xml:space="preserve">
    <value>The number of bytes to derive must be less than or equal to the maximum output size '{0}'.</value>
  </data>
  <data name="Argument_DestinationTooShort" xml:space="preserve">
    <value>Destination is too short.</value>
  </data>
  <data name="Argument_FormatNotSupported" xml:space="preserve">
    <value>The key BLOB format '{0}' is not supported by the specified algorithm.</value>
  </data>
  <data name="Argument_HashLength" xml:space="preserve">
    <value>The length of the hash must be equal to {0}.</value>
  </data>
  <data name="Argument_InvalidPrkLength" xml:space="preserve">
    <value>The length of the pseudorandom key must be greater than or equal to {0}.</value>
  </data>
  <data name="Argument_InvalidPrkLengthExact" xml:space="preserve">
    <value>The length of the pseudorandom key must be equal to {0}.</value>
  </data>
  <data name="Argument_KeyWrongAlgorithm" xml:space="preserve">
    <value>The specified key is for algorithm '{0}'. Expected '{1}'.</value>
  </data>
  <data name="Argument_MacKey" xml:space="preserve">
    <value>The specified key is for algorithm '{0}'. Expected '{1}'.</value>
  </data>
  <data name="Argument_MacLength" xml:space="preserve">
    <value>The length of the MAC must be equal to {0}.</value>
  </data>
  <data name="Argument_MinMaxValue" xml:space="preserve">
    <value>'{0}' cannot be greater than {1}.</value>
  </data>
  <data name="Argument_NonceFixedCounterSize" xml:space="preserve">
    <value>The total length of the nonce must be between 0 and {0} bytes.</value>
  </data>
  <data name="Argument_NonceFixedSize" xml:space="preserve">
    <value>The fixed part of the nonce must have a length between 0 and {0} bytes.</value>
  </data>
  <data name="Argument_NonceLength" xml:space="preserve">
    <value>The nonce must have a length of '{0}' bytes.</value>
  </data>
  <data name="Argument_NonceXorSize" xml:space="preserve">
    <value>The right-hand side must have the same length as the nonce.</value>
  </data>
  <data name="Argument_OverlapCiphertext" xml:space="preserve">
    <value>The ciphertext must not overlap with the plaintext.</value>
  </data>
  <data name="Argument_OverlapInfo" xml:space="preserve">
    <value>The output bytes must not overlap with the info.</value>
  </data>
  <data name="Argument_OverlapPlaintext" xml:space="preserve">
    <value>The plaintext must not overlap with the ciphertext.</value>
  </data>
  <data name="Argument_OverlapPrk" xml:space="preserve">
    <value>The output bytes must not overlap with the pseudorandom key.</value>
  </data>
  <data name="Argument_OverlapSalt" xml:space="preserve">
    <value>The output bytes must not overlap with the salt.</value>
  </data>
  <data name="Argument_PlaintextLength" xml:space="preserve">
    <value>The length of the plaintext must be equal to the length of the ciphertext minus the tag size.</value>
  </data>
  <data name="Argument_PlaintextTooLong" xml:space="preserve">
    <value>The length of the plaintext must be less than or equal to {0}.</value>
  </data>
  <data name="Argument_SaltLength" xml:space="preserve">
    <value>The length of the salt must be equal to {0}.</value>
  </data>
  <data name="Argument_SaltNotSupported" xml:space="preserve">
    <value>A salt is not supported by this algorithm and must be an empty span.</value>
  </data>
  <data name="Argument_SharedSecretLength" xml:space="preserve">
    <value>The length of the shared secret must be less than or equal to {0}.</value>
  </data>
  <data name="Argument_SignatureLength" xml:space="preserve">
    <value>The signature must have a length of {0} bytes.</value>
  </data>
  <data name="Format_BadBase16" xml:space="preserve">
    <value>The input is not a valid Base16 string as it contains a non-Base16 character.</value>
  </data>
  <data name="Format_BadBase32" xml:space="preserve">
    <value>The input is not a valid Base32 string as it contains a non-Base32 character, an incorrect number of padding characters, or an illegal character among the padding characters.</value>
  </data>
  <data name="Format_BadBase64" xml:space="preserve">
    <value>The input is not a valid Base64 string as it contains a non-Base64 character, an incorrect number of padding characters, or an illegal character among the padding characters.</value>
  </data>
  <data name="Format_InvalidBlob" xml:space="preserve">
    <value>The key BLOB is not in the correct format.</value>
  </data>
  <data name="InvalidOperation_AlreadyArchived" xml:space="preserve">
    <value>The key can be exported only once.</value>
  </data>
  <data name="InvalidOperation_ExportNotAllowed" xml:space="preserve">
    <value>The key cannot be exported.</value>
  </data>
  <data name="InvalidOperation_InitializationFailed" xml:space="preserve">
    <value>An error occurred while initializing cryptographic primitives.</value>
  </data>
  <data name="InvalidOperation_InitializationFailed_InvalidLibSodiumVersion" xml:space="preserve">
    <value>Could not initialize, libsodium version provided is invalid! (Expected: {0} | Provided {1})</value>
  </data>
  <data name="InvalidOperation_InternalError" xml:space="preserve">
    <value>An internal error occurred.</value>
  </data>
  <data name="InvalidOperation_NoPublicKey" xml:space="preserve">
    <value>The key does not have a public key.</value>
  </data>
  <data name="InvalidOperation_UninitializedState" xml:space="preserve">
    <value>The state must be initialized.</value>
  </data>
  <data name="NotSupported_CreateKey" xml:space="preserve">
    <value>The specified algorithm does not use keys.</value>
  </data>
  <data name="NotSupported_ExportKey" xml:space="preserve">
    <value>The algorithm for the key does not support exporting keys.</value>
  </data>
  <data name="NotSupported_ImportKey" xml:space="preserve">
    <value>The specified algorithm does not support importing keys.</value>
  </data>
  <data name="NotSupported_Operation" xml:space="preserve">
    <value>This operation is not supported.</value>
  </data>
  <data name="Overflow_NonceCounter" xml:space="preserve">
    <value>Increasing the counter of the nonce results in an overflow.</value>
  </data>
  <data name="PlatformNotSupported_Algorithm" xml:space="preserve">
    <value>The algorithm is not supported on this platform.</value>
  </data>
  <data name="PlatformNotSupported_Initialization" xml:space="preserve">
    <value>Could not initialize platform-specific components. NSec may not be supported on this platform. See https://nsec.rocks/docs/install for more information.</value>
  </data>
</root>